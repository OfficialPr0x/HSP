import React, { useState } from 'react';
import { generateGuide, getAIInsights } from '../services/api';
import { TextField, Button, CircularProgress, Typography, Paper } from '@material-ui/core';
import { makeStyles } from '@material-ui/core/styles';
import Alert from '@material-ui/lab/Alert';

const useStyles = makeStyles((theme) => ({
  root: {
    padding: theme.spacing(3),
  },
  form: {
    display: 'flex',
    alignItems: 'center',
    marginBottom: theme.spacing(3),
  },
  input: {
    flexGrow: 1,
    marginRight: theme.spacing(2),
  },
  content: {
    marginTop: theme.spacing(3),
  },
  pre: {
    whiteSpace: 'pre-wrap',
    wordBreak: 'break-word',
    backgroundColor: theme.palette.grey[100],
    padding: theme.spacing(2),
    borderRadius: theme.shape.borderRadius,
  },
}));

function PentestGuide() {
  const classes = useStyles();
  const [scopeUrl, setScopeUrl] = useState('');
  const [guide, setGuide] = useState(null);
  const [insights, setInsights] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const handleGenerateGuide = async () => {
    setLoading(true);
    setError(null);
    try {
      const guideData = await generateGuide(scopeUrl);
      setGuide(guideData);
      const insightsData = await getAIInsights(scopeUrl);
      setInsights(insightsData);
    } catch (error) {
      console.error('Error generating guide:', error);
      setError('Failed to generate guide. Please try again.');
    }
    setLoading(false);
  };

  return (
    <Paper className={classes.root}>
      <Typography variant="h4" gutterBottom>
        Pentest Guide Generator
      </Typography>
      <div className={classes.form}>
        <TextField
          className={classes.input}
          value={scopeUrl}
          onChange={(e) => setScopeUrl(e.target.value)}
          placeholder="Enter HackerOne program URL or custom scope"
          variant="outlined"
        />
        <Button
          onClick={handleGenerateGuide}
          disabled={loading || !scopeUrl}
          variant="contained"
          color="primary"
        >
          {loading ? <CircularProgress size={24} /> : 'Generate Guide'}
        </Button>
      </div>
      {error && <Alert severity="error">{error}</Alert>}
      {guide && (
        <div className={classes.content}>
          <Typography variant="h5" gutterBottom>
            Penetration Testing Guide
          </Typography>
          <pre className={classes.pre}>{JSON.stringify(guide, null, 2)}</pre>
        </div>
      )}
      {insights && (
        <div className={classes.content}>
          <Typography variant="h5" gutterBottom>
            AI Insights
          </Typography>
          <pre className={classes.pre}>{insights}</pre>
        </div>
      )}
    </Paper>
  );
}

export default PentestGuide;